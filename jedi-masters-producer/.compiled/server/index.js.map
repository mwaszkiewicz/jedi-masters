{"version":3,"sources":["../../src/server/index.js"],"names":["port","name","Server","apiInstance","undefined","initializeApi","use","bodyParser","text","type","limit","urlencoded","extended","json","console","info","addApiRoute","method","uri","cbs","toLowerCase","createDocumentation","options","explorer","swaggerUi","serve","setup","swaggerDocument","start","listen","err","result","error"],"mappings":"2EAAA,kC;AACA,yC;AACA,gC;AACA,sD;AACA,6C;;AAEA,IAAMA,OAAO,MAAb;AACA,IAAMC,OAAO,uBAAb,C;;AAEqBC,M;;;AAGnB,kBAAc,qDAFdC,WAEc,GAFAC,SAEA;;;;AAIdC,iBAJc,GAIE,YAAM;AAClB,cAAKF,WAAL,GAAmB,wBAAnB;AACA,cAAKA,WAAL,CAAiBG,GAAjB,CAAqBC,qBAAWC,IAAX,CAAgB;AACjCC,kBAAM,WAD2B;AAEjCC,mBAAO,KAF0B,EAAhB,CAArB;;AAIA,cAAKP,WAAL,CAAiBG,GAAjB,CAAqBC,qBAAWI,UAAX,CAAsB;AACvCC,sBAAU,IAD6B;AAEvCF,mBAAO,KAFgC,EAAtB,CAArB;;AAIA,cAAKP,WAAL,CAAiBG,GAAjB,CAAqBC,qBAAWM,IAAX,CAAgB;AACjCH,mBAAO,KAD0B,EAAhB,CAArB;;AAGA,cAAKP,WAAL,CAAiBG,GAAjB,CAAqB,sBAAO,KAAP,CAArB;AACAQ,gBAAQC,IAAR,CAAa,gBAAb;AACH,KAnBa;;AAqBdC,eArBc,GAqBA,UAACC,MAAD,EAASC,GAAT,EAAcC,GAAd,EAAsB;AAChC,YAAMJ,0BAAwBE,MAAxB,UAAmCC,GAAzC;AACA,cAAKf,WAAL,CAAiBc,OAAOG,WAAP,EAAjB,EAAuCF,GAAvC,EAA4CC,GAA5C;AACAL,gBAAQC,IAAR,CAAaA,IAAb;AACH,KAzBa;;AA2BdM,uBA3Bc,GA2BQ,YAAM;AACxBP,gBAAQC,IAAR,CAAa,iBAAb;AACA,YAAMO,UAAU;AACZC,sBAAU,IADE,EAAhB;;AAGA,cAAKpB,WAAL,CAAiBG,GAAjB,CAAqB,WAArB,EAAkCkB,2BAAUC,KAA5C,EAAmDD,2BAAUE,KAAV,CAAgBC,iBAAhB,EAAiCL,OAAjC,CAAnD;AACH,KAjCa;;AAmCdM,SAnCc,GAmCN,YAAM;AACVd,gBAAQC,IAAR,CAAa,oBAAb;AACA,cAAKZ,WAAL,CAAiB0B,MAAjB,CAAwB7B,IAAxB,EAA8B,UAAC8B,GAAD,EAAMC,MAAN,EAAiB;AAC3C,gBAAID,GAAJ,EAAS;AACLhB,wBAAQkB,KAAR,sBAAkC/B,IAAlC,eAAmD6B,GAAnD;AACH,aAFD,MAEM;AACFhB,wBAAQC,IAAR,CAAiBd,IAAjB,gCAAiDD,IAAjD;AACH;AACJ,SAND;AAOH,KA5Ca,CACV,KAAKK,aAAL,GACH,C,mBALkBH,M","file":"index.js","sourcesContent":["import express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport logger from 'morgan';\r\nimport swaggerUi from 'swagger-ui-express';\r\nimport swaggerDocument from '../../swagger.json';\r\n\r\nconst port = '3002';\r\nconst name = 'jedi-masters-producer';\r\n\r\nexport default class Server {\r\n  apiInstance = undefined;\r\n\r\n  constructor() {\r\n      this.initializeApi();\r\n  }\r\n\r\n  initializeApi = () => {\r\n      this.apiInstance = express();\r\n      this.apiInstance.use(bodyParser.text({\r\n          type: 'text/html',\r\n          limit: '1mb'\r\n      }));\r\n      this.apiInstance.use(bodyParser.urlencoded({\r\n          extended: true,\r\n          limit: '1mb'\r\n      }));\r\n      this.apiInstance.use(bodyParser.json({\r\n          limit: '1mb'\r\n      }));\r\n      this.apiInstance.use(logger('dev'));\r\n      console.info('Api setup done');\r\n  };\r\n\r\n  addApiRoute = (method, uri, cbs) => {\r\n      const info = `Added route: [${method}] ${uri}`;\r\n      this.apiInstance[method.toLowerCase()](uri, cbs);\r\n      console.info(info);\r\n  };\r\n\r\n  createDocumentation = () => {\r\n      console.info('Set swagger doc');\r\n      const options = {\r\n          explorer: true\r\n      };\r\n      this.apiInstance.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument, options));\r\n  };\r\n\r\n  start = () => {\r\n      console.info('Starting server...');\r\n      this.apiInstance.listen(port, (err, result) => {\r\n          if (err) {\r\n              console.error(`Unable to start ${ name } server:`, err);\r\n          }else {\r\n              console.info(`${ name } server is listening on ${port}`);\r\n          }\r\n      });\r\n  };\r\n}\r\n"]}